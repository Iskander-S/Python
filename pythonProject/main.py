import telebot
from telebot import types
import csv
import datetime
import threading
import time

TOKEN = '7840762508:AAGoLhJhDW-mebn2VojRmDcSpybMmn7PAHo'
ADMIN_ID = 

bot = telebot.TeleBot(TOKEN)
user_data = {}

FAQ = {
    "–ê–¥—Ä–µ—Å": "–ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –°–∞—Ç–ø–∞–µ–≤–∞ 22, –ì–£–ö –ö–ê–ó–ù–ò–¢–£, 2 —ç—Ç–∞–∂, –∫–∞–±–∏–Ω–µ—Ç 206–∞, –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏.\n–í—Ö–æ–¥ —Å —É–ª–∏—Ü—ã –ë–∞–π—Ç—É—Ä—Å—ã–Ω–æ–≤–∞. –ö–∞–∫ –∑–∞—Ö–æ–¥–∏—Ç–µ —Å–ª–µ–≤–∞ –ª–µ—Å—Ç–Ω–∏—Ü–∞ –∏ —Å—Ä–∞–∑—É –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –∫ –Ω–∞–º –ø–æ–ø–∞–¥–µ—Ç–µ.",
    "–ì—Ä–∞—Ñ–∏–∫": "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n - –°–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 15:00 –¥–æ 20:00\n - –í —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 9:00 –¥–æ 19:00.",
}

lesson_times_by_age = {
    "5-6": {
        "Sunday": ["17:00 - 18:00", "18:00 - 19:00"],
    },
    "7-10": {
        "Saturday": ["9:30 - 10:30", "10:30 - 11:30", "12:00 - 13:00", "13:00 - 14:00"],
        "Sunday": ["9:30 - 10:30", "10:30 - 11:30", "12:00 - 13:00", "13:00 - 14:00"]
    },
    "11-13": {
        "Tuesday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Wednesday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Thursday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Friday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Saturday": ["15:00 - 16:00"],
        "Sunday": ["15:00 - 16:00"],
    },
    "14-16": {
        "Saturday": ["12:00 - 13:00"],
        "Sunday": ["12:00 - 13:00"],
    }
}

course_info_texts = {
    "ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞": "üõ†ü§ñ –ö—É—Ä—Å—ã –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ:\n 1) VEX GO / LEGO ‚Äî 5 000 ‚Ç∏ –∑–∞ —É—Ä–æ–∫. –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ 8 —É—Ä–æ–∫–æ–≤ ‚Äî 9-–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n 2) –í–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å VEX IQ ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 2 –º–µ—Å—è—Ü–∞, –ø–æ 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü. –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 40 000 ‚Ç∏ –≤ –º–µ—Å—è—Ü.\n 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º VEX IQ –∏ VEX V5:\n - –û–ø–ª–∞—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞: 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 40 000 ‚Ç∏ (IQ) –∏–ª–∏ 48 000 ‚Ç∏ (V5).\n - –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 68 000 ‚Ç∏ (IQ) –∏–ª–∏ 76 000 ‚Ç∏ (V5).",
    "üíª –ö—É—Ä—Å—ã": "üíª –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, –≥–µ–π–º–¥–µ–≤—É –∏ Python. –í–æ–∑—Ä–∞—Å—Ç: 9‚Äì16 –ª–µ—Ç.",
    "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å": "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å –∏—é–Ω—è –ø–æ –∞–≤–≥—É—Å—Ç. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ò–ò –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –°–º–µ–Ω–∞ –¥–ª–∏—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏.",
    "üë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üß† –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 80 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üé® 3D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "üé® 3D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 –º–µ—Å—è—Ü\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 80 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üß† –ò–ò": "ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 –º–µ—Å—è—Ü\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–Ω–∞—á–∞–ª—å–Ω—ã–π)": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞—á–∞–ª—å–Ω—ã–π):\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π):\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
}

course_info = {
    "ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞": "üõ†ü§ñ –ö—É—Ä—Å—ã –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ:\n 1) *VEX GO / LEGO* ‚Äî 5 000 ‚Ç∏ –∑–∞ —É—Ä–æ–∫. –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ 8 —É—Ä–æ–∫–æ–≤ ‚Äî 9-–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n 2) –í–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å VEX IQ ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 2 –º–µ—Å—è—Ü–∞, –ø–æ 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü. –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 40 000 ‚Ç∏ –≤ –º–µ—Å—è—Ü.\n 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º VEX IQ –∏ VEX V5:\n - –û–ø–ª–∞—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞: 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 40 000 ‚Ç∏ (IQ) –∏–ª–∏ 48 000 ‚Ç∏ (V5).\n - –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 68 000 ‚Ç∏ (IQ) –∏–ª–∏ 76 000 ‚Ç∏ (V5).",
    "üíª –ö—É—Ä—Å—ã": "üíª –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, –≥–µ–π–º–¥–µ–≤—É –∏ Python. –í–æ–∑—Ä–∞—Å—Ç: 9‚Äì16 –ª–µ—Ç.",
    "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å": "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å –∏—é–Ω—è –ø–æ –∞–≤–≥—É—Å—Ç. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ò–ò –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –°–º–µ–Ω–∞ –¥–ª–∏—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏."
}

def get_age_group(age):
    if 5 <= age <= 6:
        return "5-6"
    elif 7 <= age <= 10:
        return "7-10"
    elif 11 <= age <= 13:
        return "11-13"
    elif 14 <= age <= 16:
        return "14-16"
    else:
        return None

@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö", "üìç –ê–¥—Ä–µ—Å")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç International Robotics Academy. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)

@bot.message_handler(commands=["list"])
def send_list_to_admin(message):
    if message.chat.id != ADMIN_ID:
        return
    response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:\n\n"
    try:
        with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
            reader = csv.reader(f)
            for parts in reader:
                if len(parts) < 6:
                    continue
                response += f"üë§ {parts[1]}, {parts[2]} –ª–µ—Ç\nüìÖ {parts[3]} –≤ {parts[4]}\n\n"
    except FileNotFoundError:
        response = "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç."
    bot.send_message(ADMIN_ID, response)

@bot.message_handler(func=lambda m: True)
def handle_text(message):
    text = message.text.strip().lower()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text in ["‚úÖ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"]:
        user_data[message.chat.id] = {"step": "name"}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
        return

    if text in ["üìç –∞–¥—Ä–µ—Å", "–∞–¥—Ä–µ—Å"]:
        bot.send_message(message.chat.id, FAQ["–ê–¥—Ä–µ—Å"])
        return

    if text in ["‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "üíª –ö—É—Ä—Å—ã", "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å")
        markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)
        return

    if text == "üíª –∫—É—Ä—Å—ã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "üé® 3D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
        markup.add("üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üß† –ò–ò")
        markup.add("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–Ω–∞—á–∞–ª—å–Ω—ã–π)", "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)")
        markup.add("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:", reply_markup=markup)
        return

    if text == "üîô –Ω–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "üíª –ö—É—Ä—Å—ã", "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å")
        markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)
        return
    if text == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return

    if message.text.strip() in course_info_texts:
        bot.send_message(message.chat.id, course_info_texts[message.text.strip()])
        return

    if "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in text:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for course in courses:
            markup.add(course)
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å:", reply_markup=markup)
        user_data[message.chat.id] = {"step": "price_inquiry"}
        return

    for key in FAQ:
        if key.lower() in text:
            bot.send_message(message.chat.id, FAQ[key])
            return

    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏
    if message.chat.id in user_data:
        step = user_data[message.chat.id].get("step")

        if step == "name":
            user_data[message.chat.id]["name"] = message.text.strip()
            user_data[message.chat.id]["step"] = "age"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:")

        elif step == "age":
            try:
                age = int(message.text.strip())
                age_group = get_age_group(age)
                if age_group is None:
                    bot.send_message(message.chat.id, "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–µ—Ç–µ–π –æ—Ç 5 –¥–æ 16 –ª–µ—Ç.")
                    return
                user_data[message.chat.id]["age"] = age
                user_data[message.chat.id]["age_group"] = age_group
                user_data[message.chat.id]["step"] = "date"

                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                for day in lesson_times_by_age[age_group]:
                    markup.add(day)
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=markup)
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")

        elif step == "date":
            age_group = user_data[message.chat.id]["age_group"]
            if message.text in lesson_times_by_age[age_group]:
                user_data[message.chat.id]["date"] = message.text
                user_data[message.chat.id]["step"] = "time"

                markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                for t in lesson_times_by_age[age_group][message.text]:
                    markup.add(t)
                bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")

        elif step == "time":
            age_group = user_data[message.chat.id]["age_group"]
            date = user_data[message.chat.id]["date"]
            if message.text in lesson_times_by_age[age_group][date]:
                user_data[message.chat.id]["time"] = message.text
                username = message.from_user.username or ''
                with open("trial_lessons.csv", "a", newline='', encoding="utf-8") as f:
                    writer = csv.writer(f)
                    writer.writerow([
                        message.chat.id,
                        user_data[message.chat.id]["name"],
                        user_data[message.chat.id]["age"],
                        date,
                        message.text,
                        username
                    ])
                bot.send_message(message.chat.id,
                                 f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ {date} –≤ {message.text}. –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –∑–∞ –¥–µ–Ω—å.")
                bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {user_data[message.chat.id]['name']}, {user_data[message.chat.id]['age']} –ª–µ—Ç, {date} –≤ {message.text}.")
                user_data.pop(message.chat.id)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")

    if user_data.get(message.chat.id, {}).get("step") == "price_inquiry":
        course_name = message.text.strip()
        if course_name in courses:
            bot.send_message(message.chat.id, courses[course_name])
            user_data.pop(message.chat.id)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–Ω—è—Ç–∏—è (–≤ 9 —É—Ç—Ä–∞)
def reminder_worker():
    sent_today = set()
    while True:
        now = datetime.datetime.now()
        if now.hour == 9 and now.minute < 5:
            tomorrow = (now + datetime.timedelta(days=1)).strftime("%A")
            try:
                with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
                    reader = csv.reader(f)
                    for row in reader:
                        if len(row) < 6:
                            continue
                        chat_id = int(row[0])
                        child_name = row[1]
                        lesson_day = row[3]
                        time_str = row[4]
                        key = f"{chat_id}_{lesson_day}_{time_str}"
                        if lesson_day == tomorrow and key not in sent_today:
                            try:
                                bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –≤ {time_str}.")
                                sent_today.add(key)
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            except FileNotFoundError:
                pass
            time.sleep(300)
        else:
            time.sleep(60)

threading.Thread(target=reminder_worker, daemon=True).start()
bot.polling(none_stop=True)
