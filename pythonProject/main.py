import telebot
from telebot import types
import csv
import datetime
import threading
import time
import os
import logging
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))
    TEACHER_GROUP_IDS = [int(x) for x in os.getenv("TEACHER_GROUP_IDS", "").split(",") if x]
except (ValueError, TypeError) as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

bot = telebot.TeleBot(TOKEN)
user_data = {}
user_data_lock = threading.Lock()

# –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
FAQ = {
    "–ê–¥—Ä–µ—Å": "–ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –°–∞—Ç–ø–∞–µ–≤–∞ 22, –ì–£–ö –ö–ê–ó–ù–ò–¢–£, 2 —ç—Ç–∞–∂, –∫–∞–±–∏–Ω–µ—Ç 206–∞, –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏.\n–í—Ö–æ–¥ —Å —É–ª–∏—Ü—ã –ë–∞–π—Ç—É—Ä—Å—ã–Ω–æ–≤–∞. –ö–∞–∫ –∑–∞—Ö–æ–¥–∏—Ç–µ —Å–ª–µ–≤–∞ –ª–µ—Å—Ç–Ω–∏—Ü–∞ –∏ —Å—Ä–∞–∑—É –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –∫ –Ω–∞–º –ø–æ–ø–∞–¥–µ—Ç–µ. \nhttps://go.2gis.com/gBgLO",
    "–ì—Ä–∞—Ñ–∏–∫": "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n - –°–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É —Å 15:00 –¥–æ 20:00\n - –í —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Å 9:00 –¥–æ 19:00.",
}

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è strftime)
lesson_times_by_age = {
    "5-6": {
        "Sunday": ["17:00 - 18:00", "18:00 - 19:00"]
    },
    "7-10": {
        "Saturday": ["9:30 - 10:30", "10:30 - 11:30", "12:00 - 13:00", "13:00 - 14:00"],
        "Sunday": ["9:30 - 10:30", "10:30 - 11:30", "12:00 - 13:00", "13:00 - 14:00"]
    },
    "11-13": {
        "Tuesday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Wednesday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Thursday": ["14:30 - 15:30", "16:00 - 17:00"],
        "Saturday": ["15:00 - 16:00"],
        "Sunday": ["15:00 - 16:00"],
    },
    "14-16": {
        "Saturday": ["12:00 - 13:00"],
        "Sunday": ["12:00 - 13:00"],
    }
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –≤ —Ä—É—Å—Å–∫–∏–µ
weekday_translation = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

course_info_texts = {
    "ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞": "üõ†ü§ñ –ö—É—Ä—Å—ã –ø–æ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ:\n 1) VEX GO / LEGO ‚Äî 5 000 ‚Ç∏ –∑–∞ —É—Ä–æ–∫. –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ 8 —É—Ä–æ–∫–æ–≤ ‚Äî 9-–π —É—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n 2) –í–≤–æ–¥–Ω—ã–π –∫—É—Ä—Å VEX IQ ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 2 –º–µ—Å—è—Ü–∞, –ø–æ 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü. –°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 40 000 ‚Ç∏ –≤ –º–µ—Å—è—Ü.\n 3) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º VEX IQ –∏ VEX V5:\n - –û–ø–ª–∞—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞: 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 40 000 ‚Ç∏ (IQ) –∏–ª–∏ 48 000 ‚Ç∏ (V5).\n - –ü–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü ‚Äî 68 000 ‚Ç∏ (IQ) –∏–ª–∏ 76 000 ‚Ç∏ (V5).",
    "üíª –ö—É—Ä—Å—ã": "üíª –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É, –≥–µ–π–º–¥–µ–≤—É –∏ Python. –í–æ–∑—Ä–∞—Å—Ç: 9‚Äì16 –ª–µ—Ç.",
    "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å": "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å –∏—é–Ω—è –ø–æ –∞–≤–≥—É—Å—Ç. –í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –ò–ò –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –°–º–µ–Ω–∞ –¥–ª–∏—Ç—Å—è 2 –Ω–µ–¥–µ–ª–∏.",
    "üë®‚Äçüíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "üß† –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 80 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üé® 3D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "üé® 3D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 –º–µ—Å—è—Ü\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 80 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üß† –ò–ò": "ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 –º–µ—Å—è—Ü\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–Ω–∞—á–∞–ª—å–Ω—ã–π)": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ (–Ω–∞—á–∞–ª—å–Ω—ã–π):\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∏ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π):\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–µ—Å—è—Ü–∞\n- –°—Ç–æ–∏–º–æ—Å—Ç—å: 40 000 ‚Ç∏\n- –£—Ä–æ–∫: 90 –º–∏–Ω—É—Ç\n- 8 —É—Ä–æ–∫–æ–≤ –≤ –º–µ—Å—è—Ü",
}

CSV_HEADER = ["chat_id", "name", "age", "date", "time", "username", "status"]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_age_group(age):
    if 5 <= age <= 6:
        return "5-6"
    elif 7 <= age <= 10:
        return "7-10"
    elif 11 <= age <= 13:
        return "11-13"
    elif 14 <= age <= 16:
        return "14-16"
    return None


def get_user_active_registrations(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    active_registrations = []
    if os.path.exists("trial_lessons.csv"):
        try:
            with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if row["chat_id"] == str(chat_id) and row.get("status", "active") == "active":
                        active_registrations.append(row)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    return active_registrations


def cancel_registration(record_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID"""
    try:
        rows = []
        with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
            reader = csv.DictReader(f)
            rows = list(reader)

        for row in rows:
            if f"{row['date']}_{row['time']}" == record_id:
                row["status"] = "cancelled"

        with open("trial_lessons.csv", "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=CSV_HEADER)
            writer.writeheader()
            writer.writerows(rows)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        return False


def get_active_registrations():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    active = []
    if os.path.exists("trial_lessons.csv"):
        try:
            with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if row.get("status", "active") == "active":
                        active.append(row)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    return active

def get_available_dates(age_group, days_ahead=14):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    today = datetime.date.today()
    result = {}
    for i in range(days_ahead):
        date = today + datetime.timedelta(days=i)
        weekday = date.strftime("%A")
        if weekday in lesson_times_by_age[age_group]:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            russian_weekday = weekday_translation.get(weekday, weekday)
            result[date.strftime("%Y-%m-%d")] = {
                "times": lesson_times_by_age[age_group][weekday],
                "weekday": russian_weekday
            }
    return result

def load_existing_slots():
    booked = set()
    if os.path.exists("trial_lessons.csv"):
        try:
            with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    if "date" in row and "time" in row:
                        booked.add((row["date"], row["time"]))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    return booked
def save_registration(chat_id, name, age, date, time, username):
    try:
        file_exists = os.path.exists("trial_lessons.csv")
        with open("trial_lessons.csv", "a", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=CSV_HEADER)
            if not file_exists:
                writer.writeheader()
            writer.writerow({
                "chat_id": chat_id,
                "name": name,
                "age": age,
                "date": date,
                "time": time,
                "username": username or "",
                "status": "active"
            })
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

@bot.message_handler(commands=["mybookings"])
def show_user_bookings(message):
    registrations = get_user_active_registrations(message.chat.id)

    if not registrations:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return

    markup = types.InlineKeyboardMarkup()
    for reg in registrations:
        btn_text = f"{reg['date']} {reg['time']} - {reg['name']}, {reg['age']} –ª–µ—Ç"
        callback_data = f"edit_{reg['date']}_{reg['time']}"
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    bot.send_message(message.chat.id, "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith("edit_"):
        record_id = call.data[5:]
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_{record_id}"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{record_id}"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ó–∞–ø–∏—Å—å: {record_id.replace('_', ' ')}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )

    elif call.data.startswith("cancel_"):
        record_id = call.data[7:]
        if cancel_registration(record_id):
            bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞"
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏!")

    elif call.data.startswith("change_"):
        record_id = call.data[7:]
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def notify_teachers(text):
    for group_id in TEACHER_GROUP_IDS:
        try:
            bot.send_message(group_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∏—Ç–µ–ª—è–º: {e}")

def clean_old_records(days_threshold=30):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    threshold_date = datetime.date.today() - datetime.timedelta(days=days_threshold)
    try:
        if os.path.exists("trial_lessons.csv"):
            with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
                reader = csv.DictReader(f)
                valid_rows = []
                for row in reader:
                    try:
                        record_date = datetime.datetime.strptime(row["date"], "%Y-%m-%d").date()
                        if record_date >= threshold_date:
                            valid_rows.append(row)
                    except ValueError:
                        continue

            with open("trial_lessons.csv", "w", newline='', encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=CSV_HEADER)
                writer.writeheader()
                writer.writerows(valid_rows)

            logger.info(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ {days_threshold} –¥–Ω–µ–π. –û—Å—Ç–∞–ª–æ—Å—å {len(valid_rows)} –∑–∞–ø–∏—Å–µ–π.")
            return len(valid_rows)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
    return 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö", "üìç –ê–¥—Ä–µ—Å"]

    if message.chat.id == ADMIN_ID:
        buttons.append("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏")

    markup.add(*buttons)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç International Robotics Academy. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                     reply_markup=markup)


@bot.message_handler(commands=["clear"])
def clear_all_records(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    if message.chat.id != ADMIN_ID:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é")
        return

    try:
        with open("trial_lessons.csv", "w", newline='', encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=CSV_HEADER)
            writer.writeheader()
        bot.reply_to(message, "‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –∑–∞–ø–∏—Å–∏")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π: {e}")


@bot.message_handler(func=lambda m: m.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏" and m.chat.id == ADMIN_ID)
def clear_records_button(message):
    clear_all_records(message)


@bot.message_handler(commands=["list"])
def send_list_to_admin(message):
    if message.chat.id != ADMIN_ID:
        return

    try:
        with open("trial_lessons.csv", newline='', encoding="utf-8") as f:
            reader = csv.DictReader(f)
            records = list(reader)

        if not records:
            bot.send_message(ADMIN_ID, "–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        response = ["üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:"]
        for row in records:
            response.append(
                f"üë§ {row.get('name', 'N/A')}, {row.get('age', 'N/A')} –ª–µ—Ç\n"
                f"üìÖ {row.get('date', 'N/A')} –≤ {row.get('time', 'N/A')}\n"
                f"üí¨ @{row.get('username', '')}\n"
            )

        bot.send_message(ADMIN_ID, "\n".join(response))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        bot.send_message(ADMIN_ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: m.text.strip().lower() in ["‚úÖ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"])
def start_registration(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_registrations = get_user_active_registrations(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    current_week = datetime.date.today().isocalendar()[1]
    has_weekly_booking = any(
        datetime.datetime.strptime(reg["date"], "%Y-%m-%d").date().isocalendar()[1] == current_week
        for reg in user_registrations
    )

    if has_weekly_booking:
        bot.send_message(message.chat.id,
                         "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ. –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.")
        return

    with user_data_lock:
        user_data[message.chat.id] = {"step": "name"}
    bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "name")
def get_name(message):
    with user_data_lock:
        user_data[message.chat.id] = {
            "name": message.text.strip(),
            "step": "age"
        }
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:")


@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "age")
def get_age(message):
    try:
        age = int(message.text.strip())
        age_group = get_age_group(age)
        if not age_group:
            return bot.send_message(message.chat.id, "–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–µ—Ç–µ–π –æ—Ç 5 –¥–æ 16 –ª–µ—Ç.")

        with user_data_lock:
            user_data[message.chat.id].update({
                "age": age,
                "age_group": age_group,
                "step": "date"
            })

        available_dates = get_available_dates(age_group)
        booked = load_existing_slots()
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

        for date_str, times in available_dates.items():
            if any((date_str, t) not in booked for t in times):
                markup.add(date_str)

        if not markup.keyboard:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            with user_data_lock:
                user_data.pop(message.chat.id, None)
            return start(message)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞:", reply_markup=markup)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "date")
def choose_date(message):
    selected_date = message.text.strip()
    with user_data_lock:
        user_info = user_data.get(message.chat.id, {})
        age_group = user_info.get("age_group")

    available_dates = get_available_dates(age_group)
    if selected_date not in available_dates:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return

    with user_data_lock:
        user_data[message.chat.id].update({
            "date": selected_date,
            "step": "time"
        })

    booked = load_existing_slots()
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)

    weekday = available_dates[selected_date]["weekday"]
    for time_slot in available_dates[selected_date]["times"]:
        if (selected_date, time_slot) not in booked:
            markup.add(f"{time_slot} ({weekday})")

    if not markup.keyboard:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
        with user_data_lock:
            user_data.pop(message.chat.id, None)
        return start(message)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("step") == "time")
def choose_time(message):
    selected_time_with_weekday = message.text.strip()
    # –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    selected_time = selected_time_with_weekday.split(" (")[0]

    chat_id = message.chat.id
    with user_data_lock:
        user_info = user_data.get(chat_id, {})
        date = user_info.get("date")
        name = user_info.get("name")
        age = user_info.get("age")
        username = message.from_user.username or ""

    booked = load_existing_slots()
    if (date, selected_time) in booked:
        bot.send_message(chat_id, "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return

    if save_registration(chat_id, name, age, date, selected_time, username):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        bot.send_message(
            chat_id,
            f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫:\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
            f"üë∂ –†–µ–±—ë–Ω–æ–∫: {name}, {age} –ª–µ—Ç\n\n"
            f"–ñ–¥—ë–º –≤–∞—Å –ø–æ –∞–¥—Ä–µ—Å—É:\n{FAQ['–ê–¥—Ä–µ—Å']}",
            reply_markup=markup
        )

        notify_text = (
            f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
            f"üë∂ {name}, {age} –ª–µ—Ç\n"
            f"üìÖ {date} –≤ {selected_time}\n"
            f"üë§ @{username}" if username else ""
        )
        bot.send_message(ADMIN_ID, notify_text)
        notify_teachers(notify_text)
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    with user_data_lock:
        user_data.pop(chat_id, None)

@bot.message_handler(func=lambda m: m.text.strip().lower() in ["üìç –∞–¥—Ä–µ—Å", "–∞–¥—Ä–µ—Å"])
def send_address(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, FAQ["–ê–¥—Ä–µ—Å"], reply_markup=markup)


@bot.message_handler(func=lambda m: m.text.strip().lower() in ["‚ÑπÔ∏è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–∞—Ö"])
def show_courses(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ü§ñ –†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "üíª –ö—É—Ä—Å—ã", "üåû –õ–µ—Ç–Ω–∏–π –ª–∞–≥–µ—Ä—å")
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text.strip() in course_info_texts)
def send_course_info(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, course_info_texts[message.text.strip()], reply_markup=markup)


@bot.message_handler(func=lambda m: m.text.strip().lower() in ["üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
def main_menu(message):
    start(message)

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
def maintenance_worker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    while True:
        now = datetime.datetime.now()

        if now.hour == 9:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            tomorrow = (now + datetime.timedelta(days=1)).date()
            try:
                active_registrations = get_active_registrations()
                for reg in active_registrations:
                    try:
                        lesson_date = datetime.datetime.strptime(reg["date"], "%Y-%m-%d").date()
                        if lesson_date == tomorrow:
                            try:
                                bot.send_message(
                                    reg["chat_id"],
                                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ {reg['time']} —É –≤–∞—Å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫!"
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
                    except ValueError:
                        continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

            if now.weekday() == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                remaining = clean_old_records(30)
                logger.info(f"–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")

            time.sleep(82800)
        else:
            time.sleep(1800)


if __name__ == "__main__":
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    clean_old_records(30)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    threading.Thread(target=maintenance_worker, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")